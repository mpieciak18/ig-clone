// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  email String @unique
  username String @unique
  name String
  bio String
  image String

  posts Post[]
  comments Comment[]
  likes Like[]
  saves Save[]
  conversations Conversation[]
  messages Message[]
  givenFollows Follow[] @relation("givenFollows")
  receivedFollows Follow[] @relation("receivedFollows")
  notifications Notification[]
}

model Follow {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  giverId Int
  giver User @relation("givenFollows", fields: [giverId], references: [id])
  receiverId Int
  receiver User @relation("receivedFollows", fields: [receiverId], references: [id])

  notificationId Int
  notification Notification
}

model Post {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  file String @unique
  test String[]
  caption String

  userId Int
  user User @relation(fields: [userId], references: [id])
  comments Comment[]
  likes Like[]
  saves Save[]
}

model Comment {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId Int
  user User @relation(fields: [userId], references: [id])
  postId Int
  post Post @relation(fields: [postId], references: [id])

  notificationId Int
  notification Notification
}

model Like {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId Int
  user User @relation(fields: [userId], references: [id])
  postId Int
  post Post @relation(fields: [postId], references: [id])

  notificationId Int
  notification Notification
}

model Save {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId Int
  user User @relation(fields: [userId], references: [id])
  postId Int
  post Post @relation(fields: [postId], references: [id])
}

model Conversation {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  users User[]
  messages Message[]
}

model Message {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  senderId Int
  sender User @relation(fields: [senderId], references: [id])
  conversationId Int
  conversation Conversation @relation(fields: [conversationId], references: [id])

  notificationId Int
  notification Notification
}

model Notification {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  
  userId Int
  user User @relation(fields: [userId], references: [id])

  // Nullable relations to each type that can generate a notification
  likeId Int?
  like Like? @relation(fields: [likeId], references: [id])

  commentId Int?
  comment Comment? @relation(fields: [commentId], references: [id])

  followId Int?
  follow Follow? @relation(fields: [followId], references: [id])

  messageId Int?
  message Message? @relation(fields: [messageId], references: [id])
  
  // Other fields...
}